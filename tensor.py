import numpy as np
from manimlib.imports import *

class TensorScene1(Scene):
    def construct(self):
        title = Title("Breaking down a Tensor in a Deep Learning context")
        title.set_color_by_gradient([RED])
        self.play(ShowCreation(title))
        self.wait(2)
        text1 = TextMobject("Tensors are mathematical objects that generalize scalars, vectors and matrices to higher dimensions.").scale(0.7)
        self.play(ShowCreation(text1))
        self.wait()
        self.play(ApplyMethod(text1.move_to, 2*UP))
        self.wait()
        text2 = TextMobject("A single-dimensional tensor can be represented as a vector. A two-dimensional tensor").scale(0.7)
        text2.shift(1*UP)
        text3 = TextMobject("as you may have guessed").scale(0.8)
        text4 = TextMobject("can be represented as a matrix.").scale(0.8)
        text4.shift(1*DOWN)
        self.play(ShowCreation(text2))
        self.wait()
        self.play(ShowCreation(text3))
        self.wait()
        self.play(ShowCreation(text4))
        self.wait()
        self.remove(text1, text2, text3, text4)
        self.wait()

        text5 = TextMobject("Now, for a 3 Dimensional matirx")
        self.play(ShowCreation(text5))
        self.wait()
        text6 = TextMobject("let's break it down...")
        self.play(Transform(text5, text6))
        self.wait()

class TensorScene2(ThreeDScene):
    def construct(self):
        prompt = TextMobject("Assuming this is a tensor").to_corner(UL)
        text2 = TextMobject("represented on a 3-D space.").to_corner(UR)
        text3 = TextMobject("Breaking down 1 dimension from a 3-D tensor").to_corner(UR)
        text4 = TextMobject("we get a 2-D matrix.").to_corner(UR)
        text5 = TextMobject("Removing another dimension from a matrix").to_corner(UR)
        text6 = TextMobject("we get a Vector.").to_corner(UR)
        text7 = TextMobject("Dialing off another axis").to_corner(UR)
        text8 = TextMobject("we obtain a Scalar point.").to_corner(UR)
        self.add_fixed_in_frame_mobjects(prompt)

        # matrix = TextMobject(r"$\begin{matrix} a & b \\ c & d \end{matrix}$").to_corner(DL)
        # self.add_fixed_in_frame_mobjects(matrix)
        matrix_big = TextMobject(r"""$\begin{bmatrix} \begin{bmatrix}  a_{11} & a_{12}\\  a_{21} & a_{22}\\ \end{bmatrix}   &   \mathbf{0}  &   \mathbf{0}   \\ \mathbf{0}   & \begin{bmatrix}  b_{11} & b_{12} & b_{13}\\   b_{21} & b_{22} & b_{23}\\   b_{31} & b_{32} & b_{33}\\ \end{bmatrix} &   \mathbf{0}          \\    \mathbf{0}      &   \mathbf{0}  & \begin{bmatrix} c_{11} & c_{12}\\  c_{21} & c_{22}\\ \end{bmatrix}     \\ \end{bmatrix} $""")
        matrix_big.scale(.3)
        matrix_big.shift(4*LEFT + 2*UP)
        # matrix_big.shift(1*DOWN)
        self.add_fixed_in_frame_mobjects(matrix_big)

        axes = ThreeDAxes()
        grid = NumberPlane()
        line = Vector(direction = UP)
        point = Dot()
        cube = Cube()
        square = Square(fill_color = BLUE, fill_opacity = 0.85)

        self.set_camera_orientation(phi = 80*DEGREES, theta = 75*DEGREES, distance=8)
        self.play(ShowCreation(axes), ShowCreation(cube), Write(prompt))
        self.wait(2)
        self.play(FadeOut(prompt))
        self.remove(matrix_big)
        self.add_fixed_in_frame_mobjects(text2)
        self.begin_ambient_camera_rotation(rate=0.1)
        self.wait(5)
        self.stop_ambient_camera_rotation()
        # self.wait(2)
        self.play(FadeOut(text2))
        self.add_fixed_in_frame_mobjects(text3)

        self.play(Transform(axes, grid))
        self.wait()
        self.move_camera(phi = 0)
        self.move_camera(theta = 0, distance = 5)
        self.play(FadeOut(text3))
        self.add_fixed_in_frame_mobjects(text4)
        self.play(Transform(cube, square))
        self.wait()

        self.play(FadeOut(text4))
        self.add_fixed_in_frame_mobjects(text5)
        self.wait()
        self.play(FadeOut(cube), Transform(axes, line))
        self.wait(2)
        self.play(FadeOut(text5))
        self.add_fixed_in_frame_mobjects(text6)

        # self.play(FadeOut(line))

        self.play(FadeOut(text6))
        self.add_fixed_in_frame_mobjects(text7)
        self.wait()
        self.play(Transform(axes, point))
        self.play(FadeOut(text7))
        self.add_fixed_in_frame_mobjects(text8)
        self.wait(2)
